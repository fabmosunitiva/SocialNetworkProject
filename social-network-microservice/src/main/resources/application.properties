# comando per scaricare l'immagine e creare il container
# docker run -d  -e POSTGRES_PASSWORD=dev  -p 5566:5432  --name socialdb postgres:latest

quarkus.datasource.db-kind=postgresql 
quarkus.datasource.username=${POSTGRES_USER}
quarkus.datasource.password=${POSTGRES_PASSWORD}

quarkus.datasource.jdbc.url=jdbc:postgresql://${DATABASE_NAME}:${DATABASE_PORT}/
quarkus.hibernate-orm.database.generation=update


quarkus.container-image.build=true
quarkus.container-image.group=UNITIVA
quarkus.container-image.name=my-social-image

# cron.expr=0 0 0 * * ?

# The Kafka broker location (defaults to localhost:9092)
kafka.bootstrap.servers=kafka:9092


# Configuring the incoming channel (reading from Kafka)
# mp.messaging.incoming.auguri-in.connector=smallrye-kafka
# mp.messaging.incoming.auguri-in.topic=auguri-topic
# mp.messaging.incoming.auguri-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
# mp.messaging.incoming.auguri-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Configuring the outgoing channel (writing to Kafka)
mp.messaging.outgoing.auguri-out.connector=smallrye-kafka
mp.messaging.outgoing.auguri-out.topic=auguri-topic
mp.messaging.outgoing.auguri-out.acks=1
# mp.messaging.outgoing.auguri-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
# mp.messaging.outgoing.auguri-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
